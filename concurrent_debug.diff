diff --git a/src/include/storage/index/b_plus_tree.h b/src/include/storage/index/b_plus_tree.h
index f019297..a1fac8e 100644
--- a/src/include/storage/index/b_plus_tree.h
+++ b/src/include/storage/index/b_plus_tree.h
@@ -13,7 +13,7 @@
 #include <queue>
 #include <string>
 #include <vector>
-
+#include <utility>  // for std::pair
 #include "concurrency/transaction.h"
 #include "storage/index/index_iterator.h"
 #include "storage/page/b_plus_tree_internal_page.h"
@@ -23,6 +23,8 @@ namespace bustub {
 
 #define BPLUSTREE_TYPE BPlusTree<KeyType, ValueType, KeyComparator>
 
+enum class Operation { FIND = 0, INSERT, DELETE };  // 三种操作：查找、插入、删除
+
 /**
  * Main class providing the API for the Interactive B+ Tree.
  *
@@ -79,13 +81,21 @@ class BPlusTree {
   // expose for test purpose
   Page *FindLeafPage(const KeyType &key, bool leftMost = false);
 
+  std::pair<Page *, bool> FindLeafPageByOperation(const KeyType &key, Operation operation = Operation::FIND,
+                                                  Transaction *transaction = nullptr, bool leftMost = false,
+                                                  bool rightMost = false);
+
+  //IndexPageType GetPageType() const { return page_type_; } // DEBUG
+
  private:
   void StartNewTree(const KeyType &key, const ValueType &value);
 
   bool InsertIntoLeaf(const KeyType &key, const ValueType &value, Transaction *transaction = nullptr);
 
+//  void InsertIntoParent(BPlusTreePage *old_node, const KeyType &key, BPlusTreePage *new_node,
+//                        Transaction *transaction = nullptr);
   void InsertIntoParent(BPlusTreePage *old_node, const KeyType &key, BPlusTreePage *new_node,
-                        Transaction *transaction = nullptr);
+                        Transaction *transaction = nullptr, bool *root_is_latched = nullptr);
 
   template <typename N>
   N *Split(N *node);
@@ -100,6 +110,15 @@ class BPlusTree {
   template <typename N>
   void Redistribute(N *neighbor_node, N *node, int index);
 
+  void UnlockPages(Transaction *transaction);
+
+  // unlock 和 unpin 事务中经过的所有parent page
+  void UnlockUnpinPages(Transaction *transaction);
+
+  // 判断node是否安全
+  template <typename N>
+  bool IsSafe(N *node, Operation op);
+
   bool AdjustRoot(BPlusTreePage *node);
 
   void UpdateRootPageId(int insert_record = 0);
@@ -116,6 +135,7 @@ class BPlusTree {
   KeyComparator comparator_;
   int leaf_max_size_;
   int internal_max_size_;
+  std::mutex root_latch_;  // 保护root page id不被改变
   std::mutex latch_;  // DEBUG
 };
 
diff --git a/src/include/storage/index/index_iterator.h b/src/include/storage/index/index_iterator.h
index 5d48e1c..047056d 100644
--- a/src/include/storage/index/index_iterator.h
+++ b/src/include/storage/index/index_iterator.h
@@ -25,7 +25,8 @@ class IndexIterator {
   using LeafPage = BPlusTreeLeafPage<KeyType, ValueType, KeyComparator>;
   // you may define your own constructor based on your member variables
   IndexIterator() = delete;
-  IndexIterator(BufferPoolManager *bpm, LeafPage *leaf, int index);
+  //IndexIterator(BufferPoolManager *bpm, LeafPage *leaf, int index);
+  IndexIterator(BufferPoolManager *bpm, Page *page, int index);
   ~IndexIterator();
 
   bool isEnd();
@@ -44,6 +45,7 @@ class IndexIterator {
   // add your own private member variables here
     // 注意：确保成员出现在构造函数的初始化列表中的顺序与它们在类中出现的顺序相同
   BufferPoolManager *buffer_pool_manager_;
+  Page *page_;
   LeafPage *leaf_;
   int index_;
 };
diff --git a/src/include/storage/page/b_plus_tree_page.h b/src/include/storage/page/b_plus_tree_page.h
index 77dbee2..bc0cb6f 100644
--- a/src/include/storage/page/b_plus_tree_page.h
+++ b/src/include/storage/page/b_plus_tree_page.h
@@ -63,6 +63,8 @@ class BPlusTreePage {
 
   void SetLSN(lsn_t lsn = INVALID_LSN);
 
+  IndexPageType GetPageType() const { return page_type_; }  // DEBUG
+
  private:
   // member variable, attributes that both internal and leaf page share
   IndexPageType page_type_ __attribute__((__unused__));
diff --git a/src/storage/index/b_plus_tree.cpp b/src/storage/index/b_plus_tree.cpp
index b82d73e..34786cd 100644
--- a/src/storage/index/b_plus_tree.cpp
+++ b/src/storage/index/b_plus_tree.cpp
@@ -47,7 +47,8 @@ INDEX_TEMPLATE_ARGUMENTS
 bool BPLUSTREE_TYPE::GetValue(const KeyType &key, std::vector<ValueType> *result, Transaction *transaction) {
   std::scoped_lock lock{latch_};  // DEBUG
   // 1 先找到leaf page，这里面会调用fetch page
-  Page *leaf_page = FindLeafPage(key, false);  // pinned leaf page
+  //Page *leaf_page = FindLeafPage(key, false);  // pinned leaf page
+  Page *leaf_page = FindLeafPageByOperation(key, Operation::FIND, transaction).first;
   assert(leaf_page != nullptr);
   // 2 在leaf page里找这个key
   LeafPage *leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());  // 记得加上GetData()
@@ -55,6 +56,7 @@ bool BPLUSTREE_TYPE::GetValue(const KeyType &key, std::vector<ValueType> *result
   ValueType value{};
   bool is_exist = leaf_node->Lookup(key, &value, comparator_);
   // 3 page用完后记得unpin page（疑问：unpin这句话一定要放在这里吗？也就是用完之后马上unpin？）
+  leaf_page->RUnlatch();
   buffer_pool_manager_->UnpinPage(leaf_page->GetPageId(), false);  // unpin leaf page
   if (is_exist) {
     result->push_back(value);  // 将得到的value添加到result中
@@ -77,8 +79,10 @@ bool BPLUSTREE_TYPE::GetValue(const KeyType &key, std::vector<ValueType> *result
  */
 INDEX_TEMPLATE_ARGUMENTS
 bool BPLUSTREE_TYPE::Insert(const KeyType &key, const ValueType &value, Transaction *transaction) {
-    std::scoped_lock lock{latch_};  // DEBUG
+  //std::scoped_lock lock{latch_};  // DEBUG
+  //
   if (IsEmpty()) {
+    const std::lock_guard<std::mutex> guard(root_latch_);  // 注意新建根节点时要锁住
     LOG_INFO("tree root is empty when insert from Insert()");
     StartNewTree(key, value);
     return true;
@@ -103,8 +107,8 @@ void BPLUSTREE_TYPE::StartNewTree(const KeyType &key, const ValueType &value) {
   }
   // 2 page id赋值给root page id，并插入header page的root page id
   root_page_id_ = new_page_id;
-  LOG_INFO("root page_id is %d from StartNewTree",root_page_id_);
   UpdateRootPageId(1);  // insert root page id in header page
+  LOG_INFO("root page_id is %d from StartNewTree",root_page_id_);
   // 3 使用leaf page的Insert函数插入(key,value)
   LeafPage *root_node = reinterpret_cast<LeafPage *>(root_page->GetData());  // 记得加上GetData()
   root_node->Init(root_page_id_,INVALID_PAGE_ID,leaf_max_size_);             //记得初始化为leaf_max_size                               // 记得初始化
@@ -132,7 +136,9 @@ INDEX_TEMPLATE_ARGUMENTS
 bool BPLUSTREE_TYPE::InsertIntoLeaf(const KeyType &key, const ValueType &value, Transaction *transaction) {
   LOG_INFO("InsertIntoLeaf begin");
   // 1 find the leaf page as insertion target
-  Page *leaf_page = FindLeafPage(key, false);  // pin leaf page
+  //Page *leaf_page = FindLeafPage(key, false);  // pin leaf page
+  auto [leaf_page, is_root_latched_] = FindLeafPageByOperation(key, Operation::INSERT, transaction);
+  LOG_INFO("FindLeafPageByOperation over from InsertIntoLeaf");
   assert(leaf_page != nullptr);
   LeafPage *leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());  // 注意，记得加上GetData()
   assert(leaf_node != nullptr);
@@ -141,6 +147,13 @@ bool BPLUSTREE_TYPE::InsertIntoLeaf(const KeyType &key, const ValueType &value,
   if (is_exist) {
     assert(leaf_page->GetPinCount() != 0);                           // Debug UnpinPage
     LOG_INFO("the key exist while inserting, just return");
+    if (is_root_latched_) {
+      root_latch_.unlock();
+    }
+    UnlockUnpinPages(transaction);  // 此函数中会释放叶子的所有现在被锁住的祖先（不包括叶子）
+    // assert(root_is_latched_ == false);
+    leaf_page->WUnlatch();
+    //该不该这里... unpin还是unlockunpin
     buffer_pool_manager_->UnpinPage(leaf_page->GetPageId(), false);  // unpin leaf page
     return false;
   }
@@ -153,8 +166,22 @@ bool BPLUSTREE_TYPE::InsertIntoLeaf(const KeyType &key, const ValueType &value,
     LeafPage *new_leaf_node = Split(leaf_node);  // pin new leaf node
     InsertIntoParent(leaf_node, new_leaf_node->KeyAt(0), new_leaf_node,
                 transaction);                                      // NOTE: insert new leaf node to parent!
+    if (is_root_latched_) {
+      LOG_INFO("Before END InsertIntoLeaf no split: root_latch_.unlock()");
+      root_latch_.unlock();
+    }
+    leaf_page->WUnlatch();
     buffer_pool_manager_->UnpinPage(new_leaf_node->GetPageId(), true);  // unpin new leaf node
+    buffer_pool_manager_->UnpinPage(new_leaf_node->GetPageId(), true);
+    return true;
+  }
+  if (is_root_latched_) {
+    LOG_INFO("Before END InsertIntoLeaf no split: root_latch_.unlock()");
+    root_latch_.unlock();
   }
+  leaf_page->WUnlatch();
+  LOG_INFO(" leaf_page->WUnlatch(); from InsertIntoLeaf");
+  UnlockUnpinPages(transaction);  // 此函数中会释放叶子的所有现在被锁住的祖先（不包括叶子）
   buffer_pool_manager_->UnpinPage(leaf_page->GetPageId(), true);  // unpin leaf page
   return true;
 }
@@ -183,6 +210,7 @@ N *BPLUSTREE_TYPE::Split(N *node) {
   }
   // 2 分情况进行拆分
   N *new_node = reinterpret_cast<N *>(new_page->GetData());  // 记得加上GetData()
+  new_node->SetPageType(node->GetPageType());
   if (node->IsLeafPage()) {                                  // leaf page
     LOG_INFO("slipt node and node is leaf");
     LeafPage *old_leaf_node = reinterpret_cast<LeafPage *>(node);
@@ -227,7 +255,7 @@ N *BPLUSTREE_TYPE::Split(N *node) {
  */
 INDEX_TEMPLATE_ARGUMENTS
 void BPLUSTREE_TYPE::InsertIntoParent(BPlusTreePage *old_node, const KeyType &key, BPlusTreePage *new_node,
-                                      Transaction *transaction) {
+                                      Transaction *transaction, bool *root_is_latched) {
   // 1 old_node是根结点
   // 创建一个新结点R当作根结点，其关键字为key。左右孩子结点分别为old_node和new_node。修改old_node和new_node的父指针，以及根结点R的孩子指针
   if (old_node->IsRootPage()) {  // old node为根结点
@@ -237,7 +265,7 @@ void BPLUSTREE_TYPE::InsertIntoParent(BPlusTreePage *old_node, const KeyType &ke
     assert(new_page != nullptr);
     assert(new_page->GetPinCount() == 1);
     root_page_id_ = new_page_id;
-    UpdateRootPageId(new_page_id);  // update root page id in header page
+    UpdateRootPageId(0);  // update root page id in header page
     LOG_INFO("change root id to %d", new_page_id);
     InternalPage *new_root_node = reinterpret_cast<InternalPage *>(new_page->GetData());
     new_root_node->Init(new_page_id,INVALID_PAGE_ID,internal_max_size_); // 注意初始化parent page id和max_size
@@ -247,6 +275,14 @@ void BPLUSTREE_TYPE::InsertIntoParent(BPlusTreePage *old_node, const KeyType &ke
     old_node->SetParentPageId(new_page_id);
     new_node->SetParentPageId(new_page_id);
     buffer_pool_manager_->UnpinPage(new_page_id, true);  // 修改了new_page->data，所以dirty置为true
+    
+    //root_latch_.unlock(); // DEBUG
+    // 新的root必定不在transaction的page_set_队列中
+    if (*root_is_latched) {
+      *root_is_latched = false;
+      root_latch_.unlock();
+    }
+    UnlockPages(transaction);
     return;                                              // 结束递归
   }
   // 2 old_node不是根结点
@@ -265,10 +301,18 @@ void BPLUSTREE_TYPE::InsertIntoParent(BPlusTreePage *old_node, const KeyType &ke
     // parent_node拆分成两个，分别是parent_node和new_parent_node
     InternalPage *new_parent_node = Split(parent_node);  // pin new parent node
     // 继续递归，下一层递归是将拆分后新结点new_parent_node的第一个key插入到parent_node的父结点
-    InsertIntoParent(parent_node, new_parent_node->KeyAt(0), new_parent_node, transaction);
+    InsertIntoParent(parent_node, new_parent_node->KeyAt(0), new_parent_node, transaction, root_is_latched);
     buffer_pool_manager_->UnpinPage(new_parent_node->GetPageId(), true);  // unpin new parent node
+    buffer_pool_manager_->UnpinPage(parent_page->GetPageId(), true);  // unpin parent page
+    return;
+  }
+  if (*root_is_latched) {
+    *root_is_latched = false;
+    root_latch_.unlock();
   }
+  UnlockPages(transaction);  // unlock除了叶子结点以外的所有上锁的祖先节点
   buffer_pool_manager_->UnpinPage(parent_page->GetPageId(), true);  // unpin parent page
+  return ;
 }
 /*****************************************************************************
  * REMOVE
@@ -282,12 +326,13 @@ void BPLUSTREE_TYPE::InsertIntoParent(BPlusTreePage *old_node, const KeyType &ke
  */
 INDEX_TEMPLATE_ARGUMENTS
 void BPLUSTREE_TYPE::Remove(const KeyType &key, Transaction *transaction) {
-  std::scoped_lock lock{latch_};  // DEBUG
+  //std::scoped_lock lock{latch_};  // DEBUG
   if (IsEmpty()) {
     return;
   }
   // find the leaf page as deletion target
-  Page *leaf_page = FindLeafPage(key, false);  // pin leaf page
+  //Page *leaf_page = FindLeafPage(key, false);  // pin leaf page
+  Page *leaf_page = FindLeafPageByOperation(key, Operation::DELETE, transaction).first;
   LeafPage *leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());
   int old_size = leaf_node->GetSize();
   int new_size = leaf_node->RemoveAndDeleteRecord(key, comparator_);  // 在leaf中删除key（如果不存在该key，则size不变）
@@ -521,11 +566,12 @@ bool BPLUSTREE_TYPE::AdjustRoot(BPlusTreePage *old_root_node) {
 INDEX_TEMPLATE_ARGUMENTS
 INDEXITERATOR_TYPE BPLUSTREE_TYPE::begin() {
   // find leftmost leaf page
-  KeyType key{};                              // not used
-  Page *leaf_page = FindLeafPage(key, true);  // pin leftmost leaf page
+  //KeyType key{};                              // not used
+  //Page *leaf_page = FindLeafPage(key, true);  // pin leftmost leaf page
+  Page *leaf_page = FindLeafPageByOperation(KeyType(), Operation::FIND, nullptr, true).first;
   assert(leaf_page != nullptr);
-  LeafPage *leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());
-  return INDEXITERATOR_TYPE(buffer_pool_manager_, leaf_node, 0);  // 最左边的叶子且index=0
+  //LeafPage *leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());
+  return INDEXITERATOR_TYPE(buffer_pool_manager_, leaf_page, 0);  // 最左边的叶子且index=0
 }
 
 /*
@@ -536,14 +582,15 @@ INDEXITERATOR_TYPE BPLUSTREE_TYPE::begin() {
 INDEX_TEMPLATE_ARGUMENTS
 INDEXITERATOR_TYPE BPLUSTREE_TYPE::Begin(const KeyType &key) {
   // find leaf page that contains the input key
-  Page *leaf_page = FindLeafPage(key, false);  // pin leaf page
+  //Page *leaf_page = FindLeafPage(key, false);  // pin leaf page
+  Page *leaf_page = FindLeafPageByOperation(key, Operation::FIND).first;
   assert(leaf_page != nullptr);
   LeafPage *leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());
   assert(leaf_node != nullptr);
   int index = leaf_node->KeyIndex(key, comparator_);  // 此处直接用KeyIndex，而不是Lookup
   // LOG_INFO("Tree.Begin before return INDEX class, index=%d leaf page id=%d leaf node page id=%d", index,
   //          leaf_page->GetPageId(), leaf_node->GetPageId());
-  return INDEXITERATOR_TYPE(buffer_pool_manager_, leaf_node, index);
+  return INDEXITERATOR_TYPE(buffer_pool_manager_, leaf_page, index);
 }
 
 /*
@@ -556,8 +603,9 @@ INDEX_TEMPLATE_ARGUMENTS
 INDEXITERATOR_TYPE BPLUSTREE_TYPE::end() {
   // LOG_INFO("Enter tree.end()");
   // find leftmost leaf page
-  KeyType key{};                              // not used
-  Page *leaf_page = FindLeafPage(key, true);  // pin leftmost leaf page
+  //KeyType key{};                              // not used
+  //Page *leaf_page = FindLeafPage(key, true);  // pin leftmost leaf page
+  Page *leaf_page = FindLeafPageByOperation(KeyType(), Operation::FIND, nullptr, false, true).first;
   LeafPage *leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());
   assert(leaf_node != nullptr);
   // 从左向右开始遍历叶子层结点，直到最后一个
@@ -569,7 +617,7 @@ INDEXITERATOR_TYPE BPLUSTREE_TYPE::end() {
     leaf_node = reinterpret_cast<LeafPage *>(leaf_page->GetData());
   }  // 结束循环时，leaf_node为叶子层的最后一个结点（rightmost leaf page）
   // 注意传入的index为leaf_node->GetSize()
-  return INDEXITERATOR_TYPE(buffer_pool_manager_, leaf_node, leaf_node->GetSize());  // 注意：此时leaf_node没有unpin
+  return INDEXITERATOR_TYPE(buffer_pool_manager_, leaf_page, leaf_node->GetSize());  // 注意：此时leaf_node没有unpin
 }
 
 /*****************************************************************************
@@ -585,56 +633,165 @@ INDEXITERATOR_TYPE BPLUSTREE_TYPE::end() {
  */
 INDEX_TEMPLATE_ARGUMENTS
 Page *BPLUSTREE_TYPE::FindLeafPage(const KeyType &key, bool leftMost) {
-  // throw Exception(ExceptionType::NOT_IMPLEMENTED, "Implement this for test");
-  if (IsEmpty()) {
-    return nullptr;
-  }
-  /*
-  page_id_t now_page_id = root_page_id_;  // initial now page id
-  page_id_t next_page_id = INVALID_PAGE_ID;
-  while (true) {
-    Page *now_page = buffer_pool_manager_->FetchPage(now_page_id);  // pin now page
-    // 注意此处Page到BPlusTreePage的转换，一定要加上GetData()！
-    BPlusTreePage *tree_node = reinterpret_cast<BPlusTreePage *>(now_page->GetData());  // transform page to tree node
-    if (tree_node->IsLeafPage()) {  // end while and return leaf page
-      return now_page;              // 注意，此时还有一个fetch page没有unpin
-    }
-    // 注意此处BPlusTreePage到InternalPage的转换，不用加GetData()
-    InternalPage *internal_node = reinterpret_cast<InternalPage *>(tree_node);  // transform tree node to internal node
-    // get next page id
-    if (leftMost) {
-      next_page_id = internal_node->ValueAt(0);  // ValueType被指定为page_id_t类型
-    } else {
-      next_page_id = internal_node->Lookup(key, comparator_);
+  return FindLeafPageByOperation(key, Operation::FIND, nullptr, leftMost, false).first;
+}
+
+INDEX_TEMPLATE_ARGUMENTS
+std::pair<Page *, bool> BPLUSTREE_TYPE::FindLeafPageByOperation(const KeyType &key, Operation operation,
+                                                                Transaction *transaction, bool leftMost,
+                                                                bool rightMost) {
+  assert(operation == Operation::FIND ? !(leftMost && rightMost) : transaction != nullptr);
+  LOG_INFO("start get root lock from FindLeafPageByOperation");
+  root_latch_.lock();
+  LOG_INFO("root lock is ok from FindLeafPageByOperation");
+  auto is_root_page_id_latched = true;
+  assert(root_page_id_ != INVALID_PAGE_ID);
+  auto page = buffer_pool_manager_->FetchPage(root_page_id_);
+  BPlusTreePage *node = reinterpret_cast<BPlusTreePage *>(page->GetData());
+  if (operation == Operation::FIND) {
+    page->RLatch();
+    is_root_page_id_latched = false;
+    root_latch_.unlock();
+  } else {
+    page->WLatch();
+    if (IsSafe(node, operation)) {
+      LOG_INFO("IsSafe");
+      is_root_page_id_latched = false;
+      root_latch_.unlock();
     }
-    buffer_pool_manager_->UnpinPage(now_page_id, false);  // unpin now page
-    now_page_id = next_page_id;                           // update now page id to next page id
+    LOG_INFO("IsSafe before");
   }
-  */
-  Page *page = buffer_pool_manager_->FetchPage(root_page_id_);               // pin root page
-  BPlusTreePage *node = reinterpret_cast<BPlusTreePage *>(page->GetData());  // transform page to tree node
-  assert(node != nullptr);
+
   while (!node->IsLeafPage()) {
-    InternalPage *internal_node = reinterpret_cast<InternalPage *>(node);
+    InternalPage *i_node = reinterpret_cast<InternalPage *>(node);
 
-    page_id_t child_page_id = INVALID_PAGE_ID;
-    // get child page id
+    page_id_t child_node_page_id;
     if (leftMost) {
-      child_page_id = internal_node->ValueAt(0);  // ValueType被指定为page_id_t类型
-      assert(child_page_id != 0);                 // DEBUG
+      child_node_page_id = i_node->ValueAt(0);
+    } else if (rightMost) {
+      child_node_page_id = i_node->ValueAt(i_node->GetSize() - 1);
     } else {
-      child_page_id = internal_node->Lookup(key, comparator_);
-      assert(child_page_id != 0);  // DEBUG   这里有问题
+      child_node_page_id = i_node->Lookup(key, comparator_);
     }
 
-    buffer_pool_manager_->UnpinPage(page->GetPageId(), false);          // unpin now page
-    Page *child_page = buffer_pool_manager_->FetchPage(child_page_id);  // pin child page
-    BPlusTreePage *child_node = reinterpret_cast<BPlusTreePage *>(child_page->GetData());
+    auto child_page = buffer_pool_manager_->FetchPage(child_node_page_id);
+    auto child_node = reinterpret_cast<BPlusTreePage *>(child_page->GetData());
+
+    if (operation == Operation::FIND) {
+      child_page->RLatch();
+      page->RUnlatch();
+      buffer_pool_manager_->UnpinPage(page->GetPageId(), false);
+    } else {
+      child_page->WLatch();
+      transaction->AddIntoPageSet(page);
+      // child node is safe, release all locks on ancestors
+      if (IsSafe(child_node, operation)) {
+        LOG_INFO("IsSafe");
+        if (is_root_page_id_latched) {
+          is_root_page_id_latched = false;
+          root_latch_.unlock();
+        }
+        UnlockUnpinPages(transaction);
+      }
+      LOG_INFO("IsSafe before");
+    }
+    page = child_page;
+    node = child_node;
+  }  // end while
 
-    node = child_node;  // update now node to child node
-    page = child_page;  // update now page to child page
+  return std::make_pair(page, is_root_page_id_latched);
+}
+
+/* unlock all pages */
+INDEX_TEMPLATE_ARGUMENTS
+void BPLUSTREE_TYPE::UnlockPages(Transaction *transaction) {
+  if (transaction == nullptr) {
+    return;
   }
-  return page;
+
+  // unlock 和 unpin 事务经过的所有parent page
+  for (Page *page : *transaction->GetPageSet()) {  // 前面加*是因为page set是shared_ptr类型
+    page->WUnlatch();
+  }
+  transaction->GetPageSet()->clear();  // 清空page set
+
+  // 如果root的mutex被此线程锁住则解锁
+  // if (root_is_latched_) {
+  //   root_is_latched_ = false;
+  //   root_latch_.unlock();
+  // }
+}
+
+/* unlock and unpin all pages */
+INDEX_TEMPLATE_ARGUMENTS
+void BPLUSTREE_TYPE::UnlockUnpinPages(Transaction *transaction) {
+  // LOG_INFO("ENTER UnlockUnpinPages Thread=%ld", getThreadId());
+
+  // 如果root的mutex被此线程锁住则解锁
+  // if (root_is_latched_) {
+  //   root_is_latched_ = false;
+  //   root_latch_.unlock();
+  // }
+
+  if (transaction == nullptr) {
+    return;
+  }
+
+  // auto pages = transaction->GetPageSet().get();
+  // LOG_INFO("transaction page set size = %d", (int)pages->size());
+
+  // unlock 和 unpin 事务经过的所有parent page
+  for (Page *page : *transaction->GetPageSet()) {  // 前面加*是因为page set是shared_ptr类型
+    // BPlusTreePage *node = reinterpret_cast<BPlusTreePage *>(page->GetData());
+    // LOG_INFO("unlock page id=%d Thread=%ld", page->GetPageId(), getThreadId());
+    // if (node->IsRootPage() && root_is_latched_) {
+    //   LOG_INFO("unlock root page id=%d Thread=%ld", page->GetPageId(), getThreadId());
+    //   root_latch_.unlock();
+    //   root_is_latched_ = false;
+    // }
+
+    page->WUnlatch();
+    buffer_pool_manager_->UnpinPage(page->GetPageId(), false);  // 疑问：此处dirty为false还是true？
+    // 应该是false，此函数只在向下find leaf page时使用，向上进行修改时是手动一步步unpin true，这里是一次性unpin false
+
+    // if (op == Operation::FIND) {
+    //   // 释放读锁
+    //   page->RUnlatch();
+    //   buffer_pool_manager_->UnpinPage(page->GetPageId(), false);
+    // } else {
+    //   // 释放写锁
+    //   page->WUnlatch();
+    //   buffer_pool_manager_->UnpinPage(page->GetPageId(), false);  // 疑问：此处dirty为false还是true？
+    // }
+  }
+  transaction->GetPageSet()->clear();  // 清空page set
+
+  // delete page 疑问：此处需要区分operation是否为delete吗？
+  // if (op == Operation::DELETE) {
+  //   for (page_id_t page_id : *transaction->GetDeletedPageSet()) {
+  //     buffer_pool_manager_->DeletePage(page_id);
+  //   }
+  //   transaction->GetDeletedPageSet()->clear();  // 清空deleted page set
+  // }
+}
+
+INDEX_TEMPLATE_ARGUMENTS
+template <typename N>
+bool BPLUSTREE_TYPE::IsSafe(N *node, Operation op) {
+  if (node->IsRootPage()) {
+    return (op == Operation::INSERT && node->GetSize() < node->GetMaxSize() - 1) ||
+           (op == Operation::DELETE && node->GetSize() > 2);
+  }
+
+  if (op == Operation::INSERT) {
+    // 疑问：maxsize要减1吗？
+    return node->GetSize() < node->GetMaxSize();// - 1;
+  }
+  // else if (op == Operation::DELETE) {
+  //   // 此处逻辑需要和coalesce函数对应
+  //   return node->GetSize() > node->GetMinSize();
+  // }
+  return true;
 }
 
 /*
diff --git a/src/storage/index/index_iterator.cpp b/src/storage/index/index_iterator.cpp
index bab5965..2db2caf 100644
--- a/src/storage/index/index_iterator.cpp
+++ b/src/storage/index/index_iterator.cpp
@@ -12,21 +12,18 @@ namespace bustub {
  * set your own input parameters
  */
 INDEX_TEMPLATE_ARGUMENTS
-INDEXITERATOR_TYPE::IndexIterator(BufferPoolManager *bpm, LeafPage *leaf, int index)
-    : buffer_pool_manager_(bpm), leaf_(leaf), index_(index) {
+INDEXITERATOR_TYPE::IndexIterator(BufferPoolManager *bpm, Page *page, int index)
+    : buffer_pool_manager_(bpm), page_(page), index_(index) {
+  leaf_ = reinterpret_cast<LeafPage *>(page_->GetData());
   // LOG_INFO("ENTER IndexIterator()");
-  assert(leaf_ != nullptr);
-  assert(leaf_->GetPageId());
   // LOG_INFO("LEAVE IndexIterator()");
 }
 
 INDEX_TEMPLATE_ARGUMENTS
 INDEXITERATOR_TYPE::~IndexIterator() {
   // LOG_INFO("ENTER ~IndexIterator()");
-  assert(leaf_ != nullptr);
-  assert(leaf_->GetPageId());
-  bool ret = buffer_pool_manager_->UnpinPage(leaf_->GetPageId(), false);
-  assert(ret != false);
+  page_->RUnlatch();
+  buffer_pool_manager_->UnpinPage(page_->GetPageId(), false);
   // LOG_INFO("LEAVE ~IndexIterator()");
 }  // 记得unpin leaf
 
@@ -49,11 +46,22 @@ INDEXITERATOR_TYPE &INDEXITERATOR_TYPE::operator++() {
   // 若index加1后指向当前leaf末尾（但不是整个叶子层的末尾），则进入下一个leaf且index置0
   index_++;
   if (index_ == leaf_->GetSize() && leaf_->GetNextPageId() != INVALID_PAGE_ID) {
+  /*
     page_id_t next_page_id = leaf_->GetNextPageId();
     buffer_pool_manager_->UnpinPage(leaf_->GetPageId(), false);       // unpin current leaf page
     Page *next_page = buffer_pool_manager_->FetchPage(next_page_id);  // pin next leaf page
     leaf_ = reinterpret_cast<LeafPage *>(next_page->GetData());       // update leaf page to next page
     index_ = 0;                                                       // reset index to zero
+  */
+    Page *next_page = buffer_pool_manager_->FetchPage(leaf_->GetNextPageId());  // pin next leaf page
+    next_page->RLatch();
+
+    page_->RUnlatch();
+    buffer_pool_manager_->UnpinPage(page_->GetPageId(), false);  // unpin current leaf page
+
+    page_ = next_page;
+    leaf_ = reinterpret_cast<LeafPage *>(page_->GetData());  // update leaf page to next page
+    index_ = 0;                                              // reset index to zero
   }
   return *this;
 }
diff --git a/src/storage/page/b_plus_tree_leaf_page.cpp b/src/storage/page/b_plus_tree_leaf_page.cpp
index b8dd4ce..ce1e9fb 100644
--- a/src/storage/page/b_plus_tree_leaf_page.cpp
+++ b/src/storage/page/b_plus_tree_leaf_page.cpp
@@ -113,6 +113,9 @@ int B_PLUS_TREE_LEAF_PAGE_TYPE::Insert(const KeyType &key, const ValueType &valu
   //   throw std::runtime_error("out of memory");
   // }
   int insert_index = KeyIndex(key, comparator);  // 查找第一个>=key的的下标
+  if (comparator(KeyAt(insert_index), key) == 0) {  // 重复的key
+    return GetSize();
+  }
   // 数组下标>=insert_index的元素整体后移1位
   // [insert_index, size - 1] --> [insert_index + 1, size]
   for (int i = GetSize(); i > insert_index; i--) {
